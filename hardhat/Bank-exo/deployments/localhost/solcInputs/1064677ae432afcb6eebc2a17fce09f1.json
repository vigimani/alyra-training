{
  "language": "Solidity",
  "sources": {
    "contracts/Bank.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\ncontract Bank {\n    struct Account {\n        uint balance;\n        uint lastpayment;\n    }\n    uint Balance; \n\n    mapping(address => Account) private accounts;\n\n    event etherDeposited(address indexed account, uint amount);\n    event etherWithdrawed(address indexed account, uint amount);\n\n    function getBalanceAndLastPayment(address _address) external view returns(Account memory) {\n        return accounts[_address];\n    }\n\n    function getBalanceTotal() public view returns(uint){\n        return Balance;\n    }\n    function withdraw(uint _amount) external {\n\n    }\n    function deposit(uint _amount) public payable {\n        accounts[msg.sender].balance += _amount;\n        accounts[msg.sender].lastpayment = block.timestamp; \n        Balance += _amount;\n        emit etherDeposited(msg.sender, _amount);\n    }\n\n    receive() external payable{\n        deposit(msg.value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}